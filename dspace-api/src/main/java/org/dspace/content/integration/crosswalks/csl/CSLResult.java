/**
 * The contents of this file are subject to the license and copyright
 * detailed in the LICENSE and NOTICE files at the root of the source
 * tree and available online at
 *
 * http://www.dspace.org/license/
 */
package org.dspace.content.integration.crosswalks.csl;

import static org.apache.commons.lang.ArrayUtils.nullToEmpty;

import java.util.Arrays;
import java.util.UUID;

import de.undercouch.citeproc.output.Bibliography;

/**
 * The citations generated by the {@link CSLGenerator}.
 * @author Luca Giamminonni (luca.giamminonni at 4science.it)
 *
 */
public class CSLResult {

    private final String format;

    private final UUID[] itemIds;

    private final String[] citationEntries;

    private final String citation;

    public CSLResult(String format, String[] itemIds, String[] citationEntries) {
        this(format, convertToUUIDs(itemIds), citationEntries, null);
    }

    public CSLResult(String format, UUID[] itemIds, String[] citationEntries) {
        this(format, itemIds, citationEntries, null);
    }

    public CSLResult(String format, UUID[] itemIds, String[] citationEntries, String citation) {

        this.format = format;
        this.itemIds = itemIds != null ? itemIds : new UUID[0];
        this.citationEntries = trimCitations(citationEntries);
        this.citation = citation != null ? citation : String.join("\n", this.citationEntries);

        if (this.itemIds.length != this.citationEntries.length) {
            throw new IllegalArgumentException("The itemIds array and the citations array must have the same length");
        }

    }

    public static CSLResult fromBibliography(String format, Bibliography bibliogr) {
        UUID[] entryIds = convertToUUIDs(bibliogr.getEntryIds());
        return new CSLResult(format, entryIds, bibliogr.getEntries(), bibliogr.makeString());
    }

    public UUID[] getItemIds() {
        return itemIds;
    }

    public String[] getCitationEntries() {
        return citationEntries;
    }

    public String getCitation() {
        return citation;
    }

    private static UUID[] convertToUUIDs(String[] itemIds) {
        return Arrays.stream(nullToEmpty(itemIds))
            .map(UUID::fromString)
            .toArray(UUID[]::new);
    }

    private String[] trimCitations(String[] citations) {
        return Arrays.stream(nullToEmpty(citations))
            .map(String::trim)
            .toArray(String[]::new);
    }

    public String getFormat() {
        return format;
    }

}
